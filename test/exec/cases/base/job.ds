
# background job
var j = ls &
assert ! $j[0]
assert ! $j[1]
assert !$j.in()
assert ! $j.out()
assert $j.size() == 1

var ex = 34 as Any
try { $j[2]; } catch $e { $ex = $e; }
assert $ex is OutOfRangeError

assert $j as String == "%1"
assert $j.wait() == 0


# disowned background job
$j = ls &!
assert ! $j[0]
assert ! $j[1]
assert !$j.in()
assert !$j.out()
assert $j.size() == 1
assert $j as String == "%0"
assert $j.wait() == 0


# co-process
$j = coproc { read; echo reply: $REPLY; }
assert $j[0]
assert $j[1]
assert $j.in()
assert $j.out()
assert $j.size() == 1

echo hello > $j[0]
assert { read -u $j[1]; $REPLY; } == "reply: hello"

assert $j.wait() == 0
assert ! $j.in()
assert !$j.out()
assert $j.size() == 1


# jobs in child
$j = {
    var j = exit 3 &
    exit ${$j.wait()}
} &
assert $j.wait() == 3


var j2 = true &
$j = {
 var s = $j2.wait()
 exit $s;
} &
assert $j.wait() == 255
assert $j2.wait() == 0


# signal
$j = for(;;) { true; } &
assert $j.poll()
$j.raise(%'STOP')
assert $j.poll()

$j.raise(%'CONT')
assert $j.poll()
$j.raise(%'term')
assert $j.wait() == %'term'.value() + 128
assert !$j.poll()


# handle SIGCONT
function handle($s : Signal) {
    echo ${$s.name()}
    exit $s
}
$SIG[%'cont'] = $handle
$j = for(;;) { true; } &
$j.raise(%'STOP')
$j.raise(%'CONT')
assert $j.wait() == %'cont'.value()


# detach
$j = coproc false
assert $j as String == '%1'
$j.detach()
assert $j as String == '%0'
assert $j.wait() == 1
