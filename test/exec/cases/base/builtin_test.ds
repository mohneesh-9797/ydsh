# not args
test
assert($? == 1) # always 1

# string op
# check not empty
test hoge
assert($? == 0)

test $'\x00ss'
assert($? == 0)

test ""
assert($? == 1)

test -n hoge
assert($? == 0)

test -n $'\x00hoge'
assert($? == 0)

test -n ''
assert($? == 1)

# check empty
test -z ""
assert($? == 0)

test -z hfoe
assert($? == 1)

test -z $'\x00hfoe'
assert($? == 1)

# compare
test AA "<" BBB
assert($? == 0)

test bb "<" a
assert($? == 1)

test aaa ">" bbb
assert($? == 1)

test bbb ">" aa
assert($? == 0)

test aa = "aa"
assert($? == 0)

test $'a\x0a' = "a"
assert($? != 0)

test aa == "a"
assert($?  == 1)

test aa '!=' 2
assert($? == 0)


# integer op
# bad integer
test u -ne 34
assert($? == 2)

test 23.o -lt 45    # not allow float
assert($? == 2)

test 9223372036854775808 -gt 1  # singed integer 64
assert($? == 2)

test -9223372036854775809 -lt 1
assert($? == 2)
assert "$(test -9223372036854775809 -lt 1 2>&1)" == "ydsh: test: -9223372036854775809: must be integer"

test 1 -eq -9223372036854775809
assert $? == 2
assert "$(test 1 -eq -9223372036854775809 2>&1)" == "ydsh: test: -9223372036854775809: must be integer"

test 23 -eq 23
assert($? == 0)

test 23 -eq -4
assert($? == 1)

test -9 -ne 00
assert($? == 0)

test -90 -ne -0090
assert($? == 2)

test -90 -ne -0070
assert($? == 0)

assert test 0xFF -eq 0Xff

assert test 076 -eq 0o0076

test -9223372036854775808 -lt 23456767
assert($? == 0)

test 9223372036854775807 -gt 1245
assert($? == 0)

test -9223372036854775808 -le -9223372036854775808
assert($? == 0)

test 9223372036854775807 -ge 9223372036854775807
assert($? == 0)


# file operator
test -a hogeuhfaer
assert($? == 1)

test -a .
assert($? == 0)

test -e ..
assert($? == 0)

test -b .
assert($? == 1)

var blk = $(df . | grep /dev)
assert $blk.empty() || (test -b $blk[0]) == (sh -c "test -b ${$blk[0]}")

test -c ..
assert($? == 1)

test -c /dev/null
assert($? == 0)

test -d .
assert($? == 0)

test -f $0
assert($? == 0)

test -g .
assert($? == 1)

test -h /dev/stdin
assert($? == 0)

test -L /dev/stdout
assert($? == 0)

test -k .
assert($? == 1)

var pipe = "hogefaefpdew_pipe"
mkfifo $pipe
test -p $pipe
assert($? == 0)
rm -f $pipe

test -r /
assert($? == 0)

test -s $0
assert($? == 0)

touch $pipe
test -s $pipe
assert($? == 1)
rm -f $pipe

test -S .
assert($? == 1)

#test -t 0
#assert($? == 0)

touch $pipe
test -u $pipe
assert($? == 1)

test -w $pipe
assert($? == 0)

chmod +x $pipe
test -x $pipe
assert($? == 0)

test -O $pipe
assert($? == 0)

test -G $pipe
assert($? == 0)

rm -f $pipe

# invalid option
test 34 -h 34
assert($? == 2)

test 34 = 34 45
assert($? == 2)

test -9 hfueir
assert($? == 2)

test hoge hoge
assert($? == 2)

true
