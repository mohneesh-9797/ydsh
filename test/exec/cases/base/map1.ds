var a = ["a" : 1]
assert($a["a"] is Int32)
assert($a["a"] == 1)
try { $a["b"]; assert($false) } catch($e) { assert($e is KeyNotFoundError) }

$a["a"] = 54
assert($a["a"] == 54)

$a["b"] = -456
assert($a["b"] == -456)

assert($a.size() is Int32)
assert($a.size() == 2)
assert(not $a.empty())

assert($a.get("b"))
assert $a.get("b")! == -456
assert(not $a.get("c"))

assert(not $a.put("c", -19))
assert($a.put("c", 789)! == -19)

assert $a.default("1234", 100) == 100
assert $a.get("1234")! == 100
assert $a.default("1234", 10) == 100

assert(not $a.remove("333"))
assert($a.remove("c"))
assert(not $a.get("c"))


var b = new Map<Int, Float>()
assert($b.size() == 0)
assert($b.empty())

$b[34] = 34.56
assert($b.size() == 1)
assert($b[34] == 34.56)

assert($b.swap(34, 100) == 34.56)
assert($b[34] == 100)
try { $b.swap(777, 23); assert($false) } catch($e) { assert($e is KeyNotFoundError) }

$b.clear()
assert($b.empty())
assert(not $b.get(34))


# inheritance
assert([23 : $true] is Map<Int, Boolean>)
assert(["fr" : 34.2] is Variant)
assert(["fre" : 32] is Any)

assert(new Map<Byte, Any>() is Map<Byte, Any>)
assert(not(new Map<Byte, Any>() is Variant))