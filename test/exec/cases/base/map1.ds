#$test($status = 1)

var a = ["a" : 1]
assert($a["a"] is Int)
assert($a["a"] == 1)
var ex = 34 as Any
try { $a["b"]; assert($false) } catch($e) { $ex = $e }
assert($ex is KeyNotFoundError)

$a["a"] = 54
assert($a["a"] == 54)

$a["b"] = -456
assert($a["b"] == -456)

assert($a.size() is Int)
assert($a.size() == 2)
assert(!$a.empty())

assert($a.get("b"))
assert $a.get("b")! == -456
assert(! $a.get("c"))

assert $a.find("b")
assert ! $a.find("de")

assert(!$a.put("c", -19))
assert($a.put("c", 789)! == -19)

assert $a.default("1234", 100) == 100
assert $a.get("1234")! == 100
assert $a.default("1234", 10) == 100

assert(! $a.remove("333"))
assert($a.remove("c"))
assert(!$a.get("c"))


var b = new Map<Int, Float>()
assert($b.size() == 0)
assert($b.empty())

$b[34] = 34.56
assert($b.size() == 1)
assert($b[34] == 34.56)

assert($b.swap(34, 100) == 34.56)
assert($b[34] == 100)
$ex = 23
try { $b.swap(777, 23); assert($false) } catch($e) { $ex = $e}
assert($ex is KeyNotFoundError)

$b.clear()
assert($b.empty())
assert(!$b.get(34))

# copy
var bb = ["s" : 1, "a" : 100]
var bb2 = $bb.copy()
$bb.clear()
assert $bb.empty()
assert $bb2.size() == 2
assert $bb2["s"] == 1
assert $bb2["a"] == 100

# inheritance
assert([23 : $true] is Map<Int, Boolean>)
assert(["fre" : 32] is Any)

assert(new Map<Boolean, Any>() is Map<Boolean, Any>)
