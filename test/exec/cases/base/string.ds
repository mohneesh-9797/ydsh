var str = "うずまきナルト"
assert($str == "うずまきナルト")
$str = 'hello world'
assert($str == 'hello world')
assert($str != "fer")

# string literal
assert('a\nb' == $'a\\nb')
assert('a\rb' == $'a\\rb')
assert('a\tb' == $'a\\tb')
assert('a\o' == $'a\o')
assert($'\101\066' == "A6")     # octal
assert($'\x09\x7E' == $'\t~')  # hex
assert($'\x09\x7e' == $'\t~')  # hex
assert($'\r' == $'\x0D')    # hex
assert $'\x00' != ''        # nul character
assert('a
b' == "a
b")  # allow new line
assert('a\nb' == "a\nb")
assert('a\rb' == "a\rb")
assert "\
hello" == "hello"

# string concatenation
assert '12he' == 12 + 'h' + 'e'
assert 'he12' == 'he' + '' + 12 + ''

# string method
assert("".empty())
assert("".size() == 0)
assert("".size() is Int32)
assert("hello".count() is Int32)
assert("hello".count() == "hello".size())
assert("あいうえお90".count() == 7)

$str = "はるのサクラ"
#$str = $str.replace("はるの", "うずまき")
#assert($str == "うずまきサクラ")

var a = "hello world"
assert($a.size() == 11)
assert($a == "hello" + ' ' + "world")

assert("12あ90灘"[0] == "1")
assert("12あ90灘"[1] == "2")
assert("12あ90灘"[2] == 'あ')
assert("12あ90灘"[5] == '灘')
try { "12あ90灘"[6]; assert($false); } catch($e) { assert($e is OutOfRangeError); }

assert($a.slice(0, 4) == "hell");
assert($a.slice(-3, -1) == "rl");
try { assert("01234".slice(4, 3) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("01234".slice(2, 100) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("01234".slice(5, 5) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("01234".slice(-1, 2) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("01234".slice(-134, -5) == "A"); } catch($e) { assert($e is OutOfRangeError); }

assert("012345".sliceFrom(3) == "345")
assert("012345".sliceFrom(-4) == "2345")
try { assert("012345".sliceFrom(-9) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("012345".sliceFrom(6) == "A"); } catch($e) { assert($e is OutOfRangeError); }

assert("012345".sliceTo(3) == "012")
assert("012345".sliceTo(-4) == "01")
try { assert("012345".sliceTo(-9) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("012345".sliceTo(9) == "A"); } catch($e) { assert($e is OutOfRangeError); }

assert(not $a.startsWith("hoge"))
assert("あ345".startsWith("あ"))
assert("".startsWith(""))
assert not "".startsWith('a')
assert("a".startsWith(""))
assert not $'a\x00b'.startsWith($'a\x00c')
assert not "".startsWith($'\x00')

assert($a.endsWith("rld"))
assert("あ345空".endsWith("5空"))
assert("".endsWith(""))
assert not "".endsWith($'\x00')
assert("a".endsWith(""))
assert not "a".endsWith($'\x00')

assert($a.indexOf("q") == -1)
assert("0123ああ".indexOf("あ") == 4)
assert("0123ああ".indexOf("") == 0)
assert $'a\x00b'.indexOf($'\x00') == 1
assert("".indexOf("") == 0)
assert("".indexOf($'\x00') == -1)
assert("".indexOf("aaa") == -1)

assert($a.lastIndexOf("l") == 9)
assert("00000".lastIndexOf("00") == 3)
assert("00000".lastIndexOf("6") == -1)
assert("0123".lastIndexOf("") == 3)
assert($'a\x00b'.lastIndexOf("") == 2)
assert($'a\x00b'.lastIndexOf($'\x00') == 1)
assert("".lastIndexOf("") == 0)
assert("".lastIndexOf("aaadd") == -1)
assert "".lastIndexOf($'\x00') == -1

var sa = "hello world !!".split(" ")
assert($sa.size() == 3)
assert($sa[0] == "hello")
assert($sa[1] == "world")
assert($sa[2] == "!!")

$sa = 'hell'.split('l')
assert $sa.size() == 2
assert $sa[0] == 'he'
assert $sa[1] == ''

$sa = 'hell'.split('h')
assert $sa.size() == 2
assert $sa[0] == ''
assert $sa[1] == 'ell'

$sa = "こんばんわ".split("ん")
assert($sa.size() == 3)
assert($sa[0] == "こ")
assert($sa[1] == "ば")
assert($sa[2] == "わ")

$sa = "hello".split("@")
assert($sa.size() == 1)
assert($sa[0] == "hello")

$sa = "hello".split("")
assert($sa.size() == 1)
assert($sa[0] == "hello")

$sa = "".split("")
assert($sa.size() == 1)
assert($sa[0] == "")

$sa = $'a\x00b\x00'.split($'\x00')
assert $sa.size() == 2
assert $sa[0] == 'a'
assert $sa[1] == 'b'

$sa = "".split($'\x00')
assert $sa.size() == 1
assert $sa[0] == ""

$sa = $'\x00'.split("")
assert $sa.size() == 1
assert $sa[0] == $'\x00'

$sa = $'a\x00b\x00c'.split('b')
assert $sa.size() == 2
assert $sa[0] == $'a\x00'
assert $sa[1] == $'\x00c'

assert(not "-1".toUint32())
assert("4294967295".toUint32()! == 4294967295u32)
assert(not "4294967296".toUint32())

assert("-2147483648".toInt32()! == -1 - 2147483647i32)
assert(not "-2147483649".toInt32())
assert("2147483647".toInt32()! == 2147483647i32)
assert(not "2147483648".toInt32())

assert("18446744073709551615".toUint64()! == 18446744073709551615u64)
assert(not "18446744073709551616".toUint64())

assert("-9223372036854775808".toInt64()! == -1 - 9223372036854775807i64)
assert(not "-9223372036854775809".toInt64())
assert("9223372036854775807".toInt64()! == 9223372036854775807i64)
assert(not "9223372036854775808".toInt64())

assert("3".toFloat()! == 3.0)
assert("-3.14e+3".toFloat()! == -3.14E+3)
assert("Nan".toFloat()!.isNan())
assert("INF".toFloat()!.isInf())

assert "~".realpath() == "$(echo ~)"
assert "fhafjeoirwae54".realpath() == "fhafjeoirwae54"

# string compare
var b = "aaa"
var c = 'ccc'

assert($b < $c)
assert($b <= $c)
assert(not($b > $c))
assert(not($b >= $c))
assert not($'a\x00b' <= $'a\x00a')
assert $'a\x00b' != $'a\x00c'
assert $'a\x00b' != $'a'

# string interpolation
$a = "西暦${1900 + 114}年"
$b = "西暦\${1900 + 114}年"

assert($a == "西暦2014年")
assert($b == '西暦${1900 + 114}年')

var d = $true
assert("this is true" == "this is $d")
assert("this is true" == "this is $true")
assert("this is false" == "this is $false")

assert("this is true" == "this is ${d}")
assert("this is true" == "this is ${true}")
assert("this is false" == "this is ${false}")

# string cast
assert(("fre" + 3.14) is String)
assert("hey" + $true == 'heytrue')
assert("" + $False == "false")

# string iterator
try { for(var i = "hello".__ITERATOR__(); $true; $i.__NEXT__()) {} }
catch($e) { assert($e is OutOfRangeError) }