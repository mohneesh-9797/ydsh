var str = "うずまきナルト"
assert($str == "うずまきナルト")
$str = 'hello world'
assert($str == 'hello world')
assert($str != "fer")

# string literal
assert('a\nb' == $'a\\nb')
assert('a\rb' == $'a\\rb')
assert('a\tb' == $'a\\tb')
assert('a\b' == $'a\b')
assert('a
b' == "a
b")  # allow new line
assert('a\nb' == "a\nb")
assert('a\rb' == "a\rb")

# string method
assert("".empty())
assert("".size() == 0)
assert("".size() is Int32)
assert("hello".count() is Int32)
assert("hello".count() == "hello".size())
assert("あいうえお90".count() == 7)

$str = "はるのサクラ"
#$str = $str.replace("はるの", "うずまき")
#assert($str == "うずまきサクラ")

var a = "hello world"
assert($a.size() == 11)
assert($a == "hello" + ' ' + "world")

assert("12あ90灘"[0] == "1")
assert("12あ90灘"[1] == "2")
assert("12あ90灘"[2] == 'あ')
assert("12あ90灘"[5] == '灘')

assert($a.slice(0, 4) == "hell");
assert($a.slice(-3, -1) == "rl");
try { assert("01234".slice(4, 3) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("01234".slice(2, 100) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("01234".slice(5, 5) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("01234".slice(-1, 2) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("01234".slice(-134, -5) == "A"); } catch($e) { assert($e is OutOfRangeError); }

assert("012345".sliceFrom(3) == "345")
assert("012345".sliceFrom(-4) == "2345")
try { assert("012345".sliceFrom(-9) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("012345".sliceFrom(6) == "A"); } catch($e) { assert($e is OutOfRangeError); }

assert("012345".sliceTo(3) == "012")
assert("012345".sliceTo(-4) == "01")
try { assert("012345".sliceTo(-9) == "A"); } catch($e) { assert($e is OutOfRangeError); }
try { assert("012345".sliceTo(9) == "A"); } catch($e) { assert($e is OutOfRangeError); }

#assert(not $a.startsWith("hoge"))
#assert($a.endsWith("rld"))
#assert($a.indexOf("q") == -1)
#assert($a.lastIndexOf("l") == 9)

var b = "aaa"
var c = 'ccc'

#assert($b < $c)
#assert($b <= $c)
#assert(not($b > $c))
#assert(not($b >= $c))

# string interpolation
$a = "西暦${1900 + 114}年"
$b = "西暦\${1900 + 114}年"

assert($a == "西暦2014年")
assert($b == '西暦${1900 + 114}年')

var d = $true
assert("this is true" == "this is $d")
assert("this is true" == "this is $true")
assert("this is false" == "this is $false")

assert("this is true" == "this is ${d}")
assert("this is true" == "this is ${true}")
assert("this is false" == "this is ${false}")

# string cast
assert(("fre" + 3.14) is String)
assert("hey" + $true == 'heytrue')
assert("" + $False == "false")