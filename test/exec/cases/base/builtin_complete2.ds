function z1($a : typeof($@.size()), $b : typeof($@.size())) : Boolean {
    if($a != $b) {
        echo 1>&2 expect: $a, but actual: $b
        return $false
    }
    return $true
}

function z2($a : String, $b : String) : Boolean {
    if($a != $b) {
        echo 1>&2 expect: $a, but actual: $b
        return $false
    }
    return $true
}


function assertArray($x : Array<String>, $y : Array<String>) {
    assert($z1($x.size(), $y.size()))

    let size = $x.size()
    for(var i = 0; $i < $size; $i++) {
        if(not $z2($x[$i], $y[$i])) {
            for(var j = 0; $j < $size; $j++) { echo $x[$j] $y[$j]; }
            assert($false)
        }
    }
}

# complete global variable name
{
    var gvars = [
        '#', '$',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '?', '@',
        'DBus', 'EUID', 'FALSE', 'False', 'HISTCMD', 'HISTFILE', 'HISTFILESIZE',
        'HISTSIZE', 'IFS', 'MACHTYPE', 'OLDPWD', 'OSTYPE', 'PID', 'PPID',
        'PS1', 'PS2', 'PWD', 'RANDOM', 'REPLY', 'SECONDS', 'TRUE', 'True', 'UID',
        'YDSH_VERSION', 'assertArray', 'false', 'reply', 'true', 'z1', 'z2'
    ]

    $assertArray($gvars, $(complete '$'))

    var gvars2 = [
        'PID', 'PPID', 'PS1', 'PS2', 'PWD'
    ]

    $assertArray($gvars2, $(complete '$P'))
    $assertArray(new Array<String>(), $(complete '$P '))
    $assertArray($gvars, $(complete '"$'))
    $assertArray($gvars, $(complete 'echo $'))
    $assertArray($gvars2, $(complete 'echo $P'))
}


# no completion candidate
assert($(complete '34').empty())
assert($(complete '34 ').empty())
assert($(complete 'echo hello ${45}').empty())
assert($(complete 'echo hello ${45}./').empty())
assert($(complete 'var a = ;').empty())
assert($(complete 'var 23').empty())
assert($(complete 'var ').empty())
assert($(complete '[  )').empty())
assert($(complete 'var 23').empty())
assert($(complete 'function f($').empty())