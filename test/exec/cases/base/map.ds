var a = ["a" : 1]
assert($a["a"] is Int32)
assert($a["a"] == 1)
try { $a["b"]; assert($false) } catch($e) { assert($e is KeyNotFoundError) }

$a["a"] = 54
assert($a["a"] == 54)

$a["b"] = -456
assert($a["b"] == -456)

assert($a.size() is Int32)
assert($a.size() == 2)
assert(not $a.empty())

assert($a.find("b"))
assert(not $a.find("c"))

assert($a.put("c", -19))
assert(not $a.put("c", 789))

assert(not $a.remove("333"))
assert($a.remove("c"))
assert(not $a.find("c"))


var b = new Map<Int, Float>()
assert($b.size() == 0)
assert($b.empty())

$b[34] = 34.56
assert($b.size() == 1)
assert($b[34] == 34.56)

assert($b.swap(34, 100) == 34.56)
assert($b[34] == 100)
try { $b.swap(777, 23); assert($false) } catch($e) { assert($e is KeyNotFoundError) }

$b.clear()
assert($b.empty())
assert(not $b.find(34))

# iterator
var c = ["a" : 23, "d" : 43, "e" : 4]
try {
    for(var i = $c.__ITERATOR__(); $true; $i.__NEXT__()) {
        'in iterator' print
    }
    assert($false)
} catch($e : OutOfRangeError) {
    $e.message() print
}

var count = 0
for(var i = $c.__ITERATOR__(); $i.__HAS_NEXT__(); ) {
    var e = $i.__NEXT__()
    assert($c[$e._0] == $e._1)
    $count++;
}
assert($count == 3)


# inheritance
assert([23 : $true] is Map<Int, Boolean>)
assert(["fr" : 34.2] is Variant)
assert(["fre" : 32] is Any)

assert(new Map<Byte, Any>() is Map<Byte, Any>)
assert(not(new Map<Byte, Any>() is Variant))