#$test($status = 1)

# Int32
var i32 = 23
assert($i32 is Int)
assert($i32 is Int32)
assert(+43 is Int32)
assert(2147483647 is Int32)
assert(+2147483647 is Int32)
assert(-2147483647 is Int32)

assert(0xFFFFFFFF is Int32)
assert(0xfFFFfFfF == -1)
assert(0x7fffffff is Int32)
assert(0x7fffffff == 2147483647)
assert(0x80000000 is Int32)
assert(0x80000000 == -1 - 2147483647)
assert(037777777777 is Int32)
assert(0o37777777777 == -1)
assert(0O17777777777 is Int32)
assert(0o17777777777 == 2147483647)
assert(0o20000000000 is Int32)
assert(0o20000000000 == -1 - 2147483647)

#Int64
var i64 = 63457l
assert($i64 is Int64)
assert(9223372036854775807L is Int64)
assert(+9223372036854775807L is Int64)
assert(-9223372036854775807l is Int64)

assert(0xFFFFFFFFFFFFFFFFl is Int64)
assert(0xFFFFFFFFFFFFFFFFL == -1l)
assert(0X7FFFFFFFFFFFFFFFl is Int64)
assert(0x7FFFFFFFFFFFFFFFL == 9223372036854775807L)
assert(0x8000000000000000l is Int64)
assert(0x8000000000000000l == -1L - 9223372036854775807l)
assert(001777777777777777777777L is Int64)
assert(00001777777777777777777777L == -1l)
assert(0O777777777777777777777l is Int64)
assert(0o777777777777777777777l == 9223372036854775807l)
assert(0o1000000000000000000000L is Int64)
assert(0o1000000000000000000000L == -1l - 9223372036854775807l)

# Int32 op
assert((12 + 3) is Int32)
assert(12 + 3 == 15)
var ex = 34 as Any
try { 2147483647 + 1 } catch $e { $ex = $e; }
assert $ex is ArithmeticError

assert((150 - 50) is Int32)
assert(150 - 50 == 100)
$ex = 56
try { -2 - 2147483647 } catch $e { $ex = $e; }
assert $ex is ArithmeticError

assert((50 * 10) is Int32)
assert(50 * 10 == 500)
$ex = 560
try { 2147483647 * 2 } catch $e { $ex = $e; }
assert $ex is ArithmeticError

assert((99 / 33) is Int32)
assert(99 / 33 == 3)
$ex = 33
try { 12/0 } catch($e) { $ex = $e}
assert($ex is ArithmeticError)

assert((99 % 33) is Int32)
assert(99 % 33 == 0)
$ex = 5
try { 12%0 } catch($e) { $ex = $e}
assert($ex is ArithmeticError)

assert(12 == + 12)
assert(-12 == - 12)
assert((! 43) is Int32)

assert(3456 != 345)
assert(3543 < 9999)
assert(32 > -999)
assert(43 <= 43)
assert(!(43 <= 0))
assert(55 >= 55)
assert(43 >= -353)

assert((1 or 2) is Int32)
assert((1 or 2) == 3)

assert((3 and 3) is Int32)
assert((3 and 3) == 3)

assert((1 xor 2) is Int32)
assert((1 xor 2) == 3)

# Int64 op
assert((12L + 3L) is Int64)
assert(12l + 3L == 15l)
$ex = 56
try { 9223372036854775807L + 1L } catch $e { $ex = $e; }
assert $ex is ArithmeticError

assert((150L - 50L) is Int64)
assert(150L - 50L == 100L)
$ex = 56
try { -2L - 9223372036854775807L } catch $e { $ex = $e; }
assert $ex is ArithmeticError

assert((50L * 10L) is Int64)
assert(50L * 10L == 500L)
$ex = 56
try { 2L * 9223372036854775807L } catch $e { $ex = $e; }
assert $ex is ArithmeticError

assert((99L / 33L) is Int64)
assert(99L / 33L == 3L)
$ex = 1
try { 12L/0L } catch($e) { $ex = $e}
assert($ex is ArithmeticError)

assert((99L % 33L) is Int64)
assert(99L % 33L == 0L)
$ex = 123
try { 12L%0L } catch($e) { $ex = $e}
assert($ex is ArithmeticError)

assert(12L == + 12L)
assert(-12L == - 12L)
assert((! 43L) is Int64)

assert(3456L != 345L)
assert(3543L < 9999L)
assert(32L > -999L)
assert(43L <= 43L)
assert(! (43L <= 0L))
assert(55L >= 55L)
assert(43L >= -353L)

assert((1L or 2L) is Int64)
assert((1L or 2L) == 3L)

assert((3L and 3L) is Int64)
assert((3L and 3L) == 3L)

assert((1L xor 2L) is Int64)
assert((1L xor 2L) == 3L)


# int cast
assert((234 - 5674L) is Int64)

# widening
var a = 2345L
$a = 12
assert($a == 12L)