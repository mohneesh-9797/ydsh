var a = ["3", "43", "d"]
assert($a.add("hello") is Array<String>)

assert($a[0] is String)
assert($a[0] == "3")
assert($a[1] == "43")
assert($a[2] == "d")
assert($a[3] == "hello")
try { $a[5]; assert($false) } catch($e) { assert($e is OutOfRangeError) }

$a[2] = "ho"
assert($a[2] == "ho")
try { $a[5] = "hoge"; assert($false) } catch($e) { assert($e is OutOfRangeError) }

assert($a.empty() == $false)
assert($a.size() is Int)
assert($a.size() == 4)


var b = new Array<Boolean>()

assert($b.size() == 0)
assert($b.empty() == $true)

$b.add($true)
assert($b.size() == 1)
assert($b[0])

assert($b.swap(0, $false))
assert($b[0] != $true)
try { $b.swap(3, $true); assert($false) } catch($e) { assert($e is OutOfRangeError) }

$b.clear()
assert($b.empty())

# stack op
$b.push($true)
assert($b.size() == 1)
assert($b.peek())
assert($b.pop())
assert($b.empty())
try { $b.pop(); assert($false) } catch($e) { assert($e is OutOfRangeError) }
try { $b.peek(); assert($false) } catch($e) { assert($e is OutOfRangeError) }

# iterator
var c = [23, 32]
try {
    for(var i = $c.__ITERATOR__(); $true; $i.__NEXT__()) {
        echo in iterator
    }
    assert($false)
} catch($e : OutOfRangeError) {
    echo ${$e.message()}
}

var count = 0
for(var i = $c.__ITERATOR__(); $i.__HAS_NEXT__(); ) {
    assert($c[$count] == $i.__NEXT__())
    $count++;
}


# inheritance
assert([34, 43] is Array<Int32>)
assert([32, 43] is Variant)
assert([34] is Any)

assert(new Array<Any>() is Array<Any>)
assert(not(new Array<Any>() is Variant))