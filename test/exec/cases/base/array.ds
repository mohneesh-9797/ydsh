var a = ["3", "43", "d"]
assert($a.add("hello") is Array<String>)

assert($a[0] is String)
assert($a[0] == "3")
assert($a[1] == "43")
assert($a[2] == "d")
assert($a[3] == "hello")
var ex = 34 as Any
try { $a[5]; assert($false) } catch($e) { $ex = $e }
assert($ex is OutOfRangeError)

$a[2] = "ho"
assert($a[2] == "ho")
$ex = 34
try { $a[5] = "hoge"; assert($false) } catch($e) { $ex = $e }
assert($ex is OutOfRangeError)

assert $a.get(2)
assert not $a.get(5)
assert $a.get(2)! == "ho"

assert($a.empty() == $false)
assert($a.size() is Int)
assert($a.size() == 4)


var b = new Array<Boolean>()

assert($b.size() == 0)
assert($b.empty() == $true)

$b.add($true)
assert($b.size() == 1)
assert($b[0])

assert($b.swap(0, $false))
assert($b[0] != $true)
$ex = 1
try { $b.swap(3, $true); assert($false) } catch($e) { $ex = $e }
assert($ex is OutOfRangeError)

$b.clear()
assert($b.empty())

# stack op
$b.push($true)
assert($b.size() == 1)
assert($b.peek())
assert($b.pop())
assert($b.empty())
$ex = 34
try { $b.pop(); assert($false) } catch($e) { $ex = $e }
assert($ex is OutOfRangeError)
$ex = 2
try { $b.peek(); assert($false) } catch($e) { $ex = $e }
assert($ex is OutOfRangeError)

# slice
$b = [$true, $false, $false]
var bb = $b.slice(0, $b.size())
$b.clear()
assert $bb.size() == 3 && $b.size() == 0

var ee = 34 as Any
try { $bb.slice(0, 4); assert $false; } catch $e { $ee = $e; }
assert $ee is OutOfRangeError
$ee = 1

assert $bb.from(1) as String == [$false, $false] as String
try { $bb.from(4); assert $false; } catch $e { $ee = $e; }
assert $ee is OutOfRangeError
$ee = 1

assert [0, 1, 2, 3].to(2) as String == [0, 1] as String
try {
 234567
 [0].to(-3); assert $false;
} catch $e { $ee = $e; }
assert $ee is OutOfRangeError
$ee = 1

{
    var c = [1]
    var d = [2, 3]
    $c.extend($d)
    assert $c.size() == 3
    assert $c[0] == 1
    assert $c[1] == 2
    assert $c[2] == 3

    $c.extend($c)
    assert $c.size() == 3
}

# inheritance
assert([34, 43] is Array<Int32>)
assert([32, 43] is Variant)
assert([34] is Any)

assert(new Array<Any>() is Array<Any>)
assert(!(new Array<Any>() is Variant))