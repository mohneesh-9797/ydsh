try {
	1 / 0
	assert($false)
} catch($e : OutOfIndexError) {
	assert($false)
} catch($e : ArithmeticError) {
	assert($true)
} catch($e : Error) {
	assert($false)
}

try {
	[12][3]
} catch($e : KeyNotFoundError) {
	assert($false)
} catch($e) {
	assert($true)
}

var flag = $false
function f($a : Boolean): Int {
	$flag = $false
	try {
		if($a) {
			1 / 0
		}
		return 100
	}
	catch($e) {
		return -100
	}
	finally {
		$flag = $true
	}
	return 0
}

assert($f($true) == -100)
assert($flag)
assert($f($false) == 100)
assert($flag)

# nested finally
function g() : Int {
	var i = 0
	try {
		try {
			return $i
		} finally {
			assert($i == 0)
			$i++
		}
	} finally {
		assert($i == 1)
		$i++
	}
	return 99
}

assert($g() == 0)
