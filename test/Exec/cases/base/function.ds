function func($x: Int) : Int {
	return $x * 2
}

assert($func is Func<Int, [Int]>)
assert($func is Any)
assert(not ($func is Variant))

function call() {
	var sub = $func
	assert($func(3) == 6)
	assert($sub(3) == 6)
}

assert($call is Func<Void>)

$call()

function f($obj :
            Func<
               Int,
               [Int]>,
          $value : Int) : Int {
	return $obj($value)
}

assert($f is Func<Int, [Func<Int, [Int]>, Int]>)
assert($f($func, 12) == 24)

function make_pair($a : Float) : String, Int32 {
    var str = $a as String
    return ($str, $str.size())
}

assert($make_pair is Func<Tuple<String, Int32>, [Float]>)