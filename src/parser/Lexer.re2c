/*
 * Copyright (C) 2015 Nagisa Sekiguchi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include <string>

#include <parser/Lexer.h>

Lexer::Lexer(unsigned int initSize, FILE *fp) :
        fp(fp), usedSize(1),
        maxSize(initSize < DEFAULT_SIZE ? DEFAULT_SIZE : initSize),
        buf(new char[this->maxSize]), lineNum(0) {
    this->buf[0] = '\0';    // terminate null character.
}

Lexer::Lexer(FILE *fp) : Lexer(DEFAULT_SIZE, fp) {
}

Lexer::Lexer(unsigned int size, char *buf) :
        fp(0), usedSize(size), maxSize(size), buf(buf), lineNum(0) {
}

Lexer::~Lexer() {
    delete[] this->buf;
    this->buf = 0;
}

void Lexer::appendToBuf(unsigned int size, char *b) {
    unsigned int curSize = this->usedSize + size;
    if(curSize > this->maxSize) {   // expand buf.
        unsigned int newSize = this->maxSize;
        do {
            newSize *= 2;
        } while(newSize < curSize);
        char *newBuf = new char[newSize];
        memcpy(newBuf, this->buf, this->usedSize);
        delete[] this->buf;
        this->buf = newBuf;
        this->maxSize = newSize;
    }

    unsigned int offset = this->usedSize - 1;   // overwrite previous null character.
    for(unsigned int i = 0; i < size; i++) {
        this->buf[offset + i] = b[i];
    }
    this->buf[curSize - 1] = '\0';
    this->usedSize = curSize;
}

TokenKind Lexer::nextToken(Token &token) {
    return INVALID; //TODO: re2c
}

unsigned int Lexer::getLineNum() {
    return this->lineNum;
}

std::string Lexer::toString(Token &token) {
    assert(token.startPos < this->usedSize &&
            token.startPos + token.size <= this->usedSize);
    return std::string(this->buf[token.startPos], token.size);
}

int Lexer::toInt(Token &token) {
    return 0;   //FIXME:
}

