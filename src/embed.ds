# builtin variable definition

if not(check_env PATH) {
    export-env PATH = '/bin:/usr/bin:/usr/local/bin'
}

alias Int = Int32
alias Uint = Uint32

var PS1 = '\s-\v\$ '
var PS2 = '> '
var HISTFILE = '~/.ydsh_history'
var HISTSIZE = 0u
var HISTFILESIZE = 1000u

# define boolean constant
let TRUE = :
let True = $TRUE
let true = $True

let FALSE = not $true
let False = $FALSE
let false = $False


# dummy function for signal handler
function SIG_DFL($s : Signal) {
    if $s == %'HUP' { exit ${$s.value() + 128}; }
}
function SIG_IGN($s : Signal) {}

## normally meaningless code, but need to prevent segmentation fault
## (due to lazy initialization of function type, see src/object.cpp)
$SIG_IGN
$SIG[%'hup'] = $SIG_DFL


# termination hook definition
var TERM_HOOK = new Func<Void, [Int, Any]>!()
let ON_EXIT = 0
let ON_ERR = 1
let ON_ASSERT = 2


# builtin D-Bus interface

interface org.freedesktop.DBus.Peer {
    function Ping()
    function GetMachineId() : String
}
alias Peer = org.freedesktop.DBus.Peer

interface org.freedesktop.DBus.Introspectable {
    function Introspect() : String
}
alias Introspectable = org.freedesktop.DBus.Introspectable

interface org.freedesktop.DBus.Properties {
    function Get($iface : String, $property : String) : Variant
    function Set($iface : String, $property : String, $value : Variant)
    function GetAll($iface : String) : Map<String, Variant>
    function PropertiesChanged($hd : Func<Void, [String, Map<String, Variant>, Array<String>]>)
}
alias Properties = org.freedesktop.DBus.Properties

alias ObjectAttr = Map<String, Map<String, Variant>>
interface org.freedesktop.DBus.ObjectManager {
    function GetManagedObjects() : Map<ObjectPath, ObjectAttr>
    function InterfacesAdded($hd : Func<Void, [ObjectPath, ObjectAttr]>)
    function InterfacesRemoved($hd : Func<Void, [ObjectPath, Array<String>]>)
}
alias ObjectManager = org.freedesktop.DBus.ObjectManager