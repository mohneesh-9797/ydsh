# builtin variable definition

import-env OLDPWD : ""
import-env PWD : "$(pwd)"

let SCRIPT_DIR = "$(pwd -P)"

if not(check_env PATH) {
    export-env PATH = '/bin:/usr/bin:/usr/local/bin'
}

type-alias Int Int32
type-alias Uint Uint32

var PS1 = '\s-\v\$ '
var PS2 = '> '
var HISTFILE = '~/.ydsh_history'
var HISTSIZE = 0u
var HISTFILESIZE = 1000u

# define boolean constant
let TRUE = :
let True = $TRUE
let true = $True

let FALSE = not $true
let False = $FALSE
let false = $False


# dummy function for signal handler
function SIG_DFL($s : Signal) {}
function SIG_IGN($s : Signal) {}


# builtin D-Bus interface

interface org.freedesktop.DBus.Peer {
    function Ping()
    function GetMachineId() : String
}
type-alias Peer org.freedesktop.DBus.Peer

interface org.freedesktop.DBus.Introspectable {
    function Introspect() : String
}
type-alias Introspectable org.freedesktop.DBus.Introspectable

interface org.freedesktop.DBus.Properties {
    function Get($iface : String, $property : String) : Variant
    function Set($iface : String, $property : String, $value : Variant)
    function GetAll($iface : String) : Map<String, Variant>
    function PropertiesChanged($hd : Func<Void, [String, Map<String, Variant>, Array<String>]>)
}
type-alias Properties org.freedesktop.DBus.Properties

type-alias ObjectAttr Map<String, Map<String, Variant>>
interface org.freedesktop.DBus.ObjectManager {
    function GetManagedObjects() : Map<ObjectPath, ObjectAttr>
    function InterfacesAdded($hd : Func<Void, [ObjectPath, ObjectAttr]>)
    function InterfacesRemoved($hd : Func<Void, [ObjectPath, Array<String>]>)
}
type-alias ObjectManager org.freedesktop.DBus.ObjectManager