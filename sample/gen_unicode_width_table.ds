#!/usr/bin/env ydsh

if $# != 1 {
    echo "[usage] $0 [output]" 1>&2
    exit 1
}

let out = "../${$@[0]}"
let work_dir = "unicode-temp"

write() {
    echo $@ >> $out
}

function table($n : String, $v : typeof([""])) {
    write -n "static const struct Interval $n[] = {"
    var i = 0
    for $e in $v {
        if($i % 4 == 0) { write -n -e "\n   "; }
        write -n " $e"
        $i++
    }
    write
    write "};"
    write
}


if not(test -d $work_dir) {
    mkdir $work_dir
}

cd $work_dir

if not(test -f UnicodeData.txt) {
    wget http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt
}

if not(test -f EastAsianWidth.txt) {
    wget http://www.unicode.org/Public/UCD/latest/ucd/EastAsianWidth.txt
}

if not(test -d uniset) {
    assert(git clone https://github.com/depp/uniset.git)
}

cd uniset
assert(autoreconf -i && ./configure && make)
cd ../

## generate code
echo "generate file: $out"

export-env UNICODE_DIR = "."
let g = "AUTO_GENERATED_$(echo $(basename $out) | tr [a-z.] [A-Z_])"

echo "/* this is a auto-generated file by using sample/$(basename $0)  */" > $out
write "/*"
cat EastAsianWidth.txt | head -n 2 >> $out
write "*/"
write "#ifndef $g"
write "#define $g"
write ""
write "struct Interval {"
write "    int begin;"
write "    int end;"
write "};"
write ""

$IFS = $'\n'
$table("zero_width_table", $(./uniset/uniset --32 cat:Me,Mn,Cf + U+1160..U+11FF - U+00AD | grep -v plane))
$table("two_width_table", $(./uniset/uniset --32 eaw:F,W - cat:Me,Mn,Cf | grep -v plane))
$table("ambiguous_width_table", $(./uniset/uniset --32 eaw:A - cat:Me,Mn,Cf | grep -v plane))
write "#endif //$g"

echo code generation success
